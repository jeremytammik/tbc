https://converter.app/audio-to-text/

We have got four
ssiones who who have used some
to listen.
is a place which has about been notorious and technology in the construction sector.
All of today are very unique,
and exciting to see what is happening right now.
Anyways, again, very often we have talks about this
which also contains the Eastern language.
It's a simple word, most of all, English.
You will make your own shot, yeah?
The simple word, it's...
The simple word, effectively.
It's a simple word.
Taking all the dust, whatever.
I said that today, I'm very, very excited to dive
into the world of A.C. technology with someone
who has been behind some of the most popular
card and beam tools since a lot of years.
Gary Mitamik, also known as the Building Coder,
is consulting analyst at Autodesk,
has been a cornerstone of the company since 1988.
And his journey began as technology, a bad angelist,
spreading the gospel of AutoCAD development
across continents after a stint away,
working on HVAC application.
Jeremy returned to Autodesk in 2005 and ever since.
He's been deeply in the Autodesk developer network
specializing in the Revit API.
So yes, Jeremy is the main Jiblemo
when something doesn't work in your plugin,
or when Judon is to understand why in the hell
there's no way to do whatever he...
An easier way when struggling with the Revit API.
Jeremy has an amazing, very, very amazing
academic background in mathematics and physics.
He has worked as a Stitcher translator,
C++ programmer, pioneering the graphic user interface
and multi-dasking projects.
Well, as I said before, fluency in six languages.
His cultural savant who also enjoys plain food,
reading, traveling, and engaging in theater improvisation,
but he also is a Joggy carpenter
and used to enjoy clambing cliffs or navigating oceans.
All those things while maintaining a family life
with four children and involvement
in community-focused projects.
I can say, I just can say,
what have you been doing my entire life, Jeremy?
Welcome to WordPress.
Hello, thank you very much.
That's nice to hear.
I'm impressed.
Well, I am impressed.
I'm impressed myself.
And I even didn't say the Joggy part,
your meditation skills,
your commitment with music
and a lot of things that are in your resume
or around the internet,
which makes me ask if are you the same guy
or there are a lot of Jeremy time or around the world
doing things related with construction sector
because it's amazing what you've done
and what you are doing.
It's all a question of marketing.
Then congratulate your marketing team
because it's quite amazing.
And please let me introduce my partners.
Today, just my partner before continuing
because I must say hello to Rafaelio,
who is helping me to destroy sex per language.
I don't need any help from my partner.
Well, as usual.
You don't know what you've been doing with your life,
but we do.
We do.
What?
By the way, Rafaelio, how are you doing?
Fine, fine.
Are you very...
With the nervous, nervous,
like I am from the spirit of threat to death.
Well, going to the point directly
because being not my mother tongue,
perhaps in English is more difficult at least for me,
making introductions or quite ampolos.
These speeches in advance,
so let's go straight and starting with your background.
You've been with Autodesk since 1988.
Most of our listeners,
well, they were just a dream in their parents' head
or even our dream.
But this means that you've been there since autocad 10.
You've been checking and that means a lot for many of us
because it's time to ask something I've been asking myself
out of years.
Come on, guys, what's wrong with our head's boundaries?
Yeah.
Oh, for real.
We are one to none.
I think I just have to say this question.
I don't know, millions of times.
But many people are aware that of your maths
and physics background,
but it is just a tiny piece of your story.
I'm not talking about your philosophy
or martial arts interests, but it makes me wonder
what was the way from your early studies in humanities
to be a computer guy?
Uh-huh.
I actually never studied humanities.
I just studied math and physics.
You studied humanities in high school?
Ah, yes, high school.
I went to an old-fashioned German high school
called Guimnasium, gymnasium in Stockholm, in Sweden.
So I grew up in Sweden and went to...
I read it.
That's why I...
Nice thing about this school was that it was sort of
traditional focused on humanities.
So there was more stress on languages
and philosophy and culture,
and I was very happy about that.
And another thing that I was happy about was that
it's a German foreign school.
So Germany subsidizes these schools
all across the planet in various places.
And for the teachers, they come from Germany
for a limited time, like four years or something,
and it's quite a privilege to go there.
They get economic advantages.
They are selected.
So we had very good teachers.
And another aspect was that for people staying in Sweden,
it was quite attractive to leave the school
for the finishing years and go to a Swedish school instead
to finish off, because they could save one year's schooling.
This gymnasium system had 13 years of schooling in total,
until you reached the Bakaloriar,
the Abid were in German.
And in the Swedish system, you had 11 or 12 years,
depending on what kind of...
Or 13 for the really hardcore technical branches.
But then you would be specializing in technical stuff,
or in simpler stuff, very nice system in Sweden.
I like it.
All the kids are together until the end of the ninth year.
And then they can choose to specialize in any kind of
direction.
And even if you want to become a carpenter
or a mechanic or something, you still stay in the same system.
So you have a certain amount of schooling
and a certain amount of practice.
And the people aiming for more academic directions,
they have more years and no practice, more academic stuff.
Anyway, so lots of people left my school
and our class shrunk and shrunk and shrunk.
And we were actually at the time,
the largest finishing class in the history of the school
with 10 pupils.
The class before us had four pupils for a year.
And the class after us had six.
So it was quite special and very high quality,
very pleasant.
You were there.
It's going to school.
Do you think because here in Spain,
we have some kind of big debate about a humanities
in high school.
And our programming about how the educational system must be.
And do you think that background in humanities
added up to your formation, to your studies in maths and physics?
Do you find it useful?
Yes, yes.
Very, very useful.
Absolutely.
I do think it's a shame that schools tend to scare young people
away from mathematics and physics and rational thinking
and logical thinking.
That's really a big fault in the part of most of our didactical
systems, I think.
But at the same time, humanities take a much more time to shape.
Yeah, I agree.
I agree.
You are doing things.
This is something that you really find the taste for it
in when you're mature and you grow up.
And it's true.
Yes, accommodation is laid in the schools, of course.
I'm a great fan of early schooling or early caring
for children.
There's this study from 1962, 1962,
proving that it is economically sensible to invest
in schooling or caring for young children.
They took 192 people in a ghetto in New York, children,
and half of them got caring in the afternoon,
and other half didn't.
In 1962, and they followed these children since then.
How long is that?
That's 38 plus 24 over 50 years.
So they could see what effect did $1 of caring per afternoon
for one child have in its life in employment, health,
criminality, everything.
And it pays off hundreds of times over.
And the prizes for this study were not
given to the social workers or teachers who
explored this concept but to a professor of economics.
He got a Nobel Prize for economics
for proving the return of investment
on this initial childhood investment.
And still, all politicians ignore it up until today.
They say, no, we need more money for police.
We need more money for prisons.
And no, less money for schools, less money for kindergarten,
less money for school.
That's criminal.
Then there's confusion between spending and investment.
Yes, yes, yes.
Yes, you can.
And there again, there you come back to rationality.
We would need a rational look at investment and spending.
And we would need rational politicians.
And we would need rational voters.
And the problems that they've conditioned.
I'm not sure that's very say, more to achieve.
But perhaps it starts with the previous part,
the investment on school.
Yes.
So it's like going again and again on the same mistakes.
I don't know if nerd or geek is offensive in English.
I mean, I'm really don't know.
I mean, I use it in Spanish as, well,
it depends on the context as something good.
But I don't know if English is something bad.
But I'm pretty sure that there's something
with what happens between being a humanities student
in baccalaureate to start math and physics
studies in university.
How is the way to do that?
I would definitely identify very strongly with geek and nerd.
And I always was one.
I'm afraid.
And I think that most people who decide to study mathematics
are nerds and geeks in a way.
Because at least from my point of view,
mathematics is a way to deal with an area
with some certainty.
You know the way to understand our world?
No, definitely not.
The world is much more complicated.
Mathematics is no way as complicated as in the world of body.
And even more complicated than just the world
are human beings and emotions and cultures.
I can say yes, they are.
Yes.
So I think many, many people who go to study mathematics
are sort of seeking something simpler than the human world
and even simpler than the humanities.
Yeah.
Well, as I said before, I researched your resume
and your entire world, all which is publishing
and internet about you, or at least many of the web pages
that says something about you and many of them
has been written by you.
But by the way, I'm everybody can read
that you're fluent in six languages, which we really
appreciate.
And not only speaks six languages,
but you're an obvious reader too.
And that's only the peak.
And what is in my head is how do these skills,
I mean, being a carpenter, being a musician,
being a climber, even, how all those skills
influence your technical work?
Well, I can say when you are working.
My work is mostly pretty separate from my private life
and other activities.
So the influence is just I'm interested in everything.
I'm interested in solving problems.
And that's one common factor between all of these activities.
I bet when you're climbing, perhaps solving a problem
could be the difference between a good end
or what not so good end.
Well, perhaps most of us and most of our audience
has an story to tell about how they ended in BAM and BIM,
or how they discovered a more productive way
to work using BIM tools.
I must say using your BIM tools, because we all
assume that gravity is everywhere and is being
the king of the market.
But your background is anything but the usual.
I mean, you're Mathematician working in the ISU,
an ISU-related company.
How was it even linked?
Perhaps there was no construction workers
to solve problems or to program in tools.
I bet they were.
When you started?
Yeah, well, Autodesk has always had a focus
on these different domains and tried
to address all of them.
So the mechanical, the architectural, the generic drawing
and modeling, and in the last decades, also
the creating worlds in general.
And when I started working for Autodesk,
I was actually employed to do developer support in Europe
when we didn't yet have any developers,
because John Walker had only just integrated Autolisp
into AutoCAD.
That was the first real sort of hardcore customization
possibility within AutoCAD.
Before that, there had been some very minute possibilities,
but Lisp really revolutionized the way that AutoCAD worked
and was used.
And even the way that Autodesk looked at AutoCAD
and the developer community as an area where
unimaginable things could be done and the tools could be used
in ways that nobody had thought possible before.
And that was actually thanks to John Walker.
I am one of the first on claiming that one of the smartest
things on RAVIT is the EAPI.
I've said many times that is very, very clever to launch
and, let's say, incomplete product that can be finished
or adapted by the owners.
Well, owners, they're users.
And I think it's fair to say that you came from AutoCAD
where a lot of people, as you said,
learned functional programming, even if they didn't know
Lisp was functional programming right away.
But how was born in the idea of opening in so open way
the EAP to be completed by the users?
I mean, when somebody realizes that perhaps the best way
to make our tool RAVIT, more and more popular,
is not to make tools for everybody, but opening it.
Are you saying that the best thing to do?
It was not doing anything at all.
Well, they did the best thing, which is open your doors
and let people to interact with your tool.
Yes.
Basically, that's what AutoCAD claims today
being a platform company, this platform idea.
And the idea of a platform grew step by step.
And that was also all due to John Walker
and back in the last millennium, because he implemented
AutoLisp for his own purposes.
He wanted to do things in AutoCAD
that were difficult to do manually.
So he wanted to do it programmatically.
And for that, he needed a programming language.
And then when AutoLisp was available and successful,
the software landscape started to change.
And more and more packages components
became available with powerful functionality
inside of libraries.
And also, AutoLisp showed that it was
powerful for interaction and manipulation.
But for performance critical tasks, it was not sufficient.
So the next package or functionality
that John Walker became interested in
was a software package called AutoSolid.
That's CSG, constructive solid geometry modeler.
So you could do solid modeling in this program.
And it had a C interface.
So after LISP, John wanted a C interface in AutoCAD,
because with a C interface, he could hook up the source code
for AutoSolid with the source code for AutoCAD.
So he went and implemented ADS, the AutoCAD development
system, which is just a C wrapper around AutoLisp.
And then he packaged AutoSolid into AutoCAD.
And suddenly, we had 3D AutoCAD.
With real solid modeling capabilities.
And quite soon afterwards, object-oriented programming
became a big topic for large software projects.
It was clear that the complexity of a large software
project cannot be managed at all without compartmentalizing
things, separating them clearly.
This is one piece, this is another piece,
this is a third piece, and the interfaces are clearly defined.
So people started thinking about converting AutoCAD
to an object-oriented environment.
And that happened with another pretty genius programmer,
Bill Adkisson, who got the task of making AutoCAD,
object-oriented, he initially wanted to do it in SmallTalk.
SmallTalk, SmallTalk, yes.
Very pure, pure, pure object orientation.
And it seemed a bit too complicated or challenging.
And I ended up using C++ instead and implementing
the AutoCAD runtime extension, ARX, which
later became object ARX.
And then with ARX, AutoCAD was just a kernel,
a very small, small, small kernel.
And everything else was plugged into this kernel.
And that meant you could take other things that were not
originally planned and add them as well.
So AutoCAD suddenly became this huge, unlimited programming
platform.
And in Revit, the situation was completely different,
because there was recently a blog post on the history of Revit.
I don't know all the details.
But it was originally written completely
without a programming interface and also
without any programming interface in mind.
And when Autodesk acquired Revit in, I don't know,
what, 2005 or something, Autodesk
said, we are a platform company.
We understand the importance of end users and developers
being able to adapt the product and adding new functionality.
And the Revit team said, never, never.
No, absolutely not.
That is not the idea of Revit.
And there was a fight about that, a struggle.
There's no way to success with that orientation.
Anyway, so Autodesk has the owner of the product,
got to do as it wanted, and an API was added.
And you started to release the API in its release of Revit
more and more open.
Is that because it was not so API focused?
I mean, because what you said was not designed to be so open
or not to be a platform itself, which is nowadays.
Yes.
Well, it's still sort of halfway between platform
and user interface.
Originally, the Revit API was a COM API.
So based on the Windows COM interface,
and that was a bit shaky.
And quite early on 2009, 2010, it switched to the.NET API,
which was more stable.
But as you say, Revit itself, its kernel
is not designed to be an API-driven kernel
or a platform for programming.
So it is still internally more focused on the user interface.
But the developers have set it up so that every single piece
of user interface functionality comes equipped with a script.
An internal Revit development language script.
So every button, every command, every option
is somehow linked to this scripting language.
And if you click a certain button,
then this scripting language will
produce the.NET API for it.
So nowadays, the requirement from the program managers
of Revit is if you write a piece of functionality,
you write the user interface.
And you must enable this script so that the APIs automatically
also produced.
And that's why the coverage is broader and broader.
And for quite a number of years, there
were old pieces of Revit that were not
equipped with this API scripting.
And all the new pieces, all of the new pieces,
were always equipped with scripting.
And therefore, the coverage would grow and grow and grow.
And then the migration, the recent migration,
I mean, it's well known that the Revit API was based on.NET 4.8
framework.
But Jibdana, I think, a huge jump in Revit 2025,
changing from.NET 4.8 to.NET Core 8.
This is some significant upgrade, isn't it?
Yes, it is.
Yes.
The range now?
It was actually overdue.
Many developers have been asking for an upgrade
to a more modern botnet platform.
Several years now, yes, absolutely, at least four or five
years, people have said, I'm using new.NET functionality.
Why are you not?
And the reason is simply that Revit
is making use of a number of additional components again.
And the dependencies of all of these components
needs to be considered.
And that makes every kind of significant migration very,
very complex to manage.
And that's the reason why it was postponed for a long time.
And there was even doubt about whether it would be possible
in this release.
And also Autodesk has tried to unify the platform components.
So there are a number of components
used in the desktop products that are reused,
both in AutoCAD, in Bentor, Revit,
in several different environments.
So all of these products had to agree and synchronize
and decide we will take this big step to move
to the new generation of.NET.
And I think during the last year or so,
it was still quite a long time unclear what version
of the.NET core will be targeted.
They started by moving to six or seven,
and then towards the end they found out, oh, yes, OK,
we can manage and we will move all the way to eight right away.
Well, perhaps those developers were
claiming for the migration are the half on the other half
is those who are claiming why the migration has to change
all my environment and makes me rewrite
the all my plugins and whatever.
That's what I was going to ask.
I mean, is it necessary?
What are the benefits of changing from.NET 4.8 to.NET
Core 8?
I mean, there's a...
I'm not an expert on.NET or the functionality,
but I can just say that.NET 4.8 was so old and out of date
and not being enhanced at a certain point after a couple of years
of age in software with security vulnerabilities
and new functionality coming up.
Things just become so old that it's very hard to maintain them.
I think I don't know if I'm wrong, but I think.NET
which one?.NET Core 8 is able to be used on web applications.
Is there any chance to have this in or let's say,
is there anything related to this huge step?
It's linked on somehow with a probably
Revit web application?
I'm pretty sure it's not.
You have to see that Revit is a C++ application.
NET API interface has not been used to you
or you have interface.
Yeah.
So perhaps a hybrid application, which means half of the application runs on your servers
and the other half runs on my web browser.
Yes.
I think some parts of Revit run that way already, don't they?
I guess that those parts will grow slowly, slowly, step by step.
But the main core of Revit is still C++ desktop local installation.
I don't know if, how is the technology?
I think there's a way to convert some C++ application into web apps,
which is what I don't mind.
I can't remember the name.
But perhaps I've just been dreaming about this unicorn called Revit Web.
You and many more.
I lost my script and it is.
Okay, just to name some of the enhancements or improvements that you released in this version.
I think because I'm not an expert on Revit, that the Revit 2025 API has introduced some
additions in the electrical and map sectors that perhaps are being more important than
the other sectors is right.
I really don't know.
I'm not at all an expert on Revit user interface or Revit functionality.
So I don't keep up to it.
I mean, in the API.
Yes.
I can't even say.
Perfect.
Let me bring something a bit different.
I mean, because, well, I'm not a Revit user.
I'm an architectural time user from a long, long time ago, some geologic era behind.
I know what I've seen, how the authoring software has evolved since its initial versions.
I was very curious when Revit was launched and have followed the software scene because
I already started learning Revit when it was part of Autodesk.
And, you know, I'm kind of a bit worried about how and where the authoring software is heading
its course.
You know, we were some very, we thought some time ago that we could make a whole project,
a whole detailed twin in our authoring software in the beginning of this process 20 years ago
or 30 years ago.
But now what we can see the last decade is that this process probably kind of a stall.
The development stopped in some of the functionalities about modeling that we would like to get
in the authoring software.
And there we go.
We thought that maybe there are some movements about how to change the licensed model and
to get into a subscription model, we will make it easier for the authoring software companies
to develop and procure these new functionalities that we need.
But probably that isn't the way it's going now.
And on top of this, we have all the legacy code that it's in bed in Revit or Antarctica
to improve because that is a heavy weight to be lifted by the programming core of companies.
So what is your point to view about this?
I mean, are we going to finally get the software that can make organic shapes or produce perfectly
that's enough or project or that's not the perspective or the destination point that
the companies want to get there?
I think the companies are all continuously searching for optimal solutions, most efficient
workflows and discovering new targets to optimize how a building is created.
And there are many, many factors that influence that.
And I'm sure the authoring software as a tool is just worn out of many number of other tools
are the communication, the collaboration, how to share this information, how to ensure
that the information goes all the way through to the building site, the maintenance of the
building and all of that.
And with all of the focus on collaboration and communication, I do think that the cloud-based
solutions can address many of those tasks and this target keeps shifting as well.
So it's clear that we have to keep up with the old functionality that is already available
and the people rely on and at the same time integrate it with new solutions that address
the most urgent tasks.
But do you think that it has shifted from the modern process to the collaboration world
to the...
And because what we see in the modern part is that the advances are fractional, you know,
the need in that field is improved or even sometimes the new tools fight along the ancient
tools because this one, this old tool, rely on a legacy code and the new are implemented
differently.
Well, I think it's very, very important to continuously look at what is the task at hand.
How can I address that most efficiently and at a certain point, when you say there's a
struggle between the new and the old or different approaches, I would definitely...
I think the most important thing in software is to not struggle.
A voice call is complicated.
If you have a problem and you have two components involved in that problem, throw them away,
both of them right away and search for a new one because there is no single programming
task on the planet that has not been solved already.
And many of them have been solved a hundred times or a thousand times.
And the...
But these solutions are available in open source.
So grab the best solution you can find, research the problem, understand the tools that you
already have in depth.
That's already a big task.
I don't understand Revit in depth and I don't think many people do.
I still turn away with that, right?
It doesn't do exactly what you want with a minimum of fuss and without any conflict
with others, throw it away and do something else because the solutions are ready to be
picked and connected.
And that's...
It's gonna be a total change in the way that people program today.
You have all these components out there and the best solution is the most efficient connection
of existing components.
Perhaps...
The high...
Sorry.
Sorry.
The high BCS smarter than the V. Or something like that.
The high BCS smarter than the V.
Perhaps Rokhalyo, you are afraid of letting Articad go and trying your own solutions.
I mean, that's not going to happen.
I think you already know who is more focused on modern part and who is on the information
part in this group.
But talking about collaboration, I didn't say before that you are part of the forge developer
support or something like that.
And you said something about the cloud and how the collaboration, the cloud applications
and everything is going on.
And when you talk about collaboration, I thought about community because collaboration means
not only collaboration, same project, but a collaboration with any other people in projects.
And we're here in BIMRAS strongly believe that what community can build.
That's why we built BIMRAS inside it actually.
And you are known not only for being a Rokhster in the developer community, but also for blowing
about forge BIMR and the Revit API.
I mean, there's like an official Jeremy Tamek speaking on the developer community.
But again, there's something like a side project, perhaps on the blogging about all those things.
What motivates you to share your knowledge so actively?
Because I've seen your posts many times link it as a solution for something or just read
what Tamek says about this or this.
And these two projects are what motivates you to share the knowledge on this way.
It's again the same motivation that I mentioned at the beginning.
I love solving problems.
And I have a lot more fun solving a programming problem.
I enjoy programming tremendously.
But there's a bigger problem around and my job is to support the developer community.
And to do that is more about communication.
And I did some programming to address very specific tasks to prove that it is possible
to achieve something.
But the longer the more I've been more of a librarian and just collecting information
and publishing it, editing it, perfecting it, making it easy to read and clear to understand.
And it seems to me that is something like a co-creator.
Yes, a curator, exactly a librarian or curator.
And it seems to me that's just the most efficient way of ensuring that the major part of the
community moves forward and can be effective.
So in a way it's another way of problem solving as well.
Just my communication and collaboration is an efficient way for problem solving.
And that is a very nice question.
I read a lot of times and many different forums or workshops or whatever.
It looks like your problem is already solved.
Everything is coded already.
So you don't have to invent the wheel again and again.
And most of that is not my programming, but the solutions from the community shared in
the discussion forum.
And in that forum also there are quite a number of people who know a lot more about both Revit
and programming than me.
I know almost nothing about Revit, I understand programming.
But these guys, many of them know more about both.
And that's what they call collective knowledge.
Yes, it's the best way to know about anything.
So Rafael, you're talking about collective thinking.
I'm always amazed how we have so much difficulties to build an AC software, an open source AC
software.
We have our landscape here in Spain and Europe.
It's a lot of extremely small companies.
And you know, sometimes we made an inquiry and for something like 500 professionals.
And we found that almost 98% were working in companies of five or less people.
And they do everything, they are protected, the structural analysis, the MEP analysis
and design, whatever you name it.
And for those companies, the license cost for all of that software that is needed is
heavy burden.
So many of them are looking at the community and asking why don't we have some AC open
source software like, for example, photographers or designers or, you know, 3D artists have
developed throughout these years.
And why do you think it's so difficult to prove this, to achieve this kind of arrangement
between the community, to work together and try to get something that would be very...
Always very interested in this aspect.
And actually back in my autolisp and AutoCAD days, a group of maybe 50 or 100 developers
we collected in Central Europe and formed a community called Age, AutoCAD Developers
Group Europe.
And we organized our own conferences and shared a lot of information because of the lack of
information on internet at the time.
It didn't really exist in the way we see it today.
And also, yeah, developer support from AutoCAD was limited basically in the beginning I
was alone in Europe.
So developers helped themselves and shared information and that was effective.
And also today I would say there are very large, very functional and powerful open source
AEC solutions being worked on.
I believe one important one is Speckle.
I don't know whether...
That's amazing.
Speckle, yeah, yeah.
We know.
But I do think the issue is also to do with liability, trust, guarantees, big companies,
marketing.
It's a little bit like the Windows desktop platform which is in many ways inferior to
something open source like Linux or it's in general.
And still the big companies all over the world spend millions and billions buying Windows
operating systems.
I know servers.
Instead of using the free open source and more trustworthy solutions that are available
and that they could even look at the code guarantee that they're not being spied on by
Chinese or NSA or Russians or whoever, but still they prefer to pay and have a guarantee
that if something goes wrong we have our developer support and so on.
It's an aversion to risk really.
I would say the whole...
Averse to trick.
Her own community in the last 50 years has been moving away from risk and fun and towards
guarantees, liability, risk aversion and that's...
I'm already saying.
Yeah, but if you think about the intellectual property and the security of our production,
which is, you know, and sometimes it is a crucial point.
You know, I don't know, something that it's very strange, the behavior of the A.T. sector
because that's the last thing we're thinking on.
I mean, we're always about the productivity and everything else, but not about...
But am I going to do with my information the day that maybe rabbit or arctic cat doesn't
exist anymore?
Yeah.
So, you know, we have used a lot of critical information and our internal property in platforms
that we don't know if they are going to be there forever.
Yes.
All of my work, everything I've ever done is in text files.
I can.
You can.
We can.
We can.
I moved from Windows to Mac like 10 or 15 years ago and all of my daily tools were Windows
batch files and Python scripts.
So I moved them to Unix shell scripts and Python scripts.
And I was moved from Windows to Mac in a couple of hours and I can move back again anytime.
And I have simply boycotted proprietary file formats all my life.
We cannot afford that luxury.
You can.
We can.
We can.
In the 1980s, I was a big missionary of do not encode your information into a DWG format.
Put it into a text file and write a small add in that reads your text file and generates
the DWG.
Same thing for a BIM.
The BIM.
That's not as killed as everybody in our sector has.
So.
Some developers do this and fair, very well with it.
I know, but when it makes you when it comes to server, for instance, everybody relates
on Linux, almost everybody relates on on Linux.
But I have to admit that when it comes to desktop, even if they are using Linux, they
prefer paid.
I mean, Linux options.
I mean, it's well known in between corporates among corporates because they provide Linux
text stops, but they also provide the security liability of a big company, which is I think
the most important factor on the choosing between open source and property platforms
from the companies.
But Raffalia, there's a lot.
I know.
I know.
Open source.
I was making.
Off.
Offering tools itself.
That means that perhaps it's not trying to achieve another in tool, but trying to get
the most of its tool.
You know, my question was about offering tools.
And, you know, that's, I mean, that's probably most difficult and support to be produced.
So, you know, but we've seen a more difficult software being produced by the community.
For example, the pseudo-analysis coringions that now is just stupid.
For example.
And, and, and, and, but we don't see that kind of achievement in the industry.
That's what's the meaning of the question.
I don't know, even Revit or out of the software have a lot of open source libraries.
Tools included on the software.
So perhaps it's not a matter of how getting an authoring tool, but how getting a good
environment for your tools.
In this out of the discussion, what's next?
I mean, your, your business is almost entirely history of the AC software.
Being a developer, of course, into the construction sector.
And being part of Autodesk, which is, let's say the first AC software company.
And related to this, I've been hearing and listening more and more how I've been manager.
Let's say I've been expert.
Must know about programming.
I'm very fond of having coding knowledge, but I'm pretty sure about this to be a man.
I've been manager has nothing to do with being a developer.
However, I believe that's that knowledge of programming, logic, algorithms, whatever.
Can be or should be tremendously useful in any technical environment.
First thing, the jury, and he has something to say to these professional students who
might be listening and considering focusing their career and putting.
I totally agree.
It's really important to know what you can do, what possibilities you have and understand
when to make use of them and when not.
And how far to go in each direction.
What about not being able to code anything?
I mean, not being a coder, but being able to think like a coder.
Yes.
Well, actually, we're getting very close to the point where certain areas of thinking
are no longer required and a certain amount of experience can be had for the cost of asking.
So I'm very excited about the developments in AI and question answering systems and coding
solutions provided or AI supported coding solutions.
So the whole coding industry has changed tremendously since the introduction of chat
GPT.
And just as an example, I think the number of questions on stack overflow reduced by 50
percent, 50, 50.
Whoa.
And stack overflow has changed and adapted its entire business model thought concept
foundations to make use of AI and to handle the changes that come by through the use of
AI.
I think I'm not the programmer now myself today because of the coding and develop a
developer support and blogging and so on.
But as far as I know, hardly any professional programmer today does not use code code project.
I must admit that I prefer going first to chat DTP than stack overflow because you know,
you can discuss the solutions and the options with it.
And in most programming environments today, you have a coding assistant built in.
There's the copilot is their co-pilot.
Yeah.
So and that does a lot of work for you.
And that work is growing very fast.
And I don't know how far it will grow.
You know, where is the end?
We live in very exciting times.
And I'll point to you.
Perhaps.
What the point is.
What's the danger?
What do you what is me is that perhaps from another point of view, we are feeding charge
DTP and all those artificial intelligence with code made of artificial intelligence.
Yeah.
It's like, I don't know if there's something innovative on there because it's always like
having other feedback is, I mean, a really feedback because it's feeding itself by the
code that it produces.
Yeah.
Yeah.
Well, there are other examples as well, actually, if you took interest in AlphaGo, that was
the goal.
Yeah, we know.
Go pro game sort that first became better at go than a human being.
And it immediately in its first competition, it was introducing new moves that had not ever
been discovered or tested by a human being.
I'm afraid about that.
And was 3000 years of history.
And nowadays.
This is crazy.
This is just about an error.
But it wasn't an error.
It wasn't.
And the machine and learn the rules on its own.
I mean, there was no programming about how to play and every single professional chess
player today trains and learns from AlphaChas.
Yeah.
And also I read an article about the guy who asked Chat GPT to make a game for him.
And he said, I like Sudoku.
But I'd like something different.
And Chat GPT invented an inverse Sudoku game for him.
It was completely new.
And he put it online.
And within a week he had 50,000 subscribers to his new game.
I'd get the name of it.
But it's on the blog somewhere.
I put it on everything.
I don't want to say what the blog would do time to be alive.
It's very exciting.
Yes.
Dangerous and exciting.
Who knows how long how many human generations there will still be to stay alive?
No.
Let's wait for me.
And perhaps next one.
In the last Retolators chess championship, the ones who's going to play against the world
champion.
What we had is a rating from how close the chess player, the human chess player, was
against the perfect moves of the machine.
And we were between 95% to 98% in the more close we get to the perfection of the machine.
So now we are measuring ourselves against the perfection of the machine.
Wow.
As amazing as Skadier.
Very scary.
Just as we wrap up our conversation today, we're curious.
I think it's something we do in its episode.
We are curious about the tools.
Are you going to skip the last questions about?
Yes.
Okay.
I lost the last question.
About what was his view of the new technologies and trends?
Well, I was to ask about the trends and new technologies, but the answer was done because
artificial intelligence is the topic.
Not visual reality.
I'm not into that myself.
I haven't really...
I've talked a lot about what's happening in the AI world, but not so much about virtual
reality.
Can you see it as a game changer or something?
Well, I don't know.
I think the game changer that will come is robotics.
I mean, we have the AI that goes around and tells us answers our questions, but we also
need someone who builds houses, washes our clothes, does the dishes and cooks five-star
menus.
I was writing yesterday that the butcher robots are pretty much better now than the human
butcher.
What robots?
The butcher.
The butcher.
Oh, wow.
The butcher now are better and more efficient and more perfect than the human butcher.
So perhaps we are...
There's nowhere to hide.
No.
We are watching how the artificial intelligence can replace us at many tasks.
Perhaps the next frontier is robots replacing the physical tasks, which is, I think, harder
than the other ones.
But again, I'm trying to close the interview with this habit we have, which is knowing
about your tools and your resources and what inspired and supported your work.
So just to make your insight not only helpful for us, but for our listeners.
And perhaps taking some good resources to explore.
So we have always two questions.
One about your information resources.
Where?
What are your main resources of information?
What resources do you use or regularly rely on?
You already said that.
You read a lot.
And which tools, which essential tool do you think is indispensable for your daily return?
Yes.
Okay.
Well, I use the command line.
Command line.
Command line.
That is shell scripts, Python scripts, programmers, text editor.
Actually, I always recommend this pamphlet.
It goes as not even above.
In the beginning was the command line.
Ah, yeah.
Because one thing that I do regret is that I did not learn Emacs or Vim.
It's wanted to.
I wanted to several times.
And I wish I had done it, you know, 40 years ago.
I just tried.
I will read in the same minute I start.
So perhaps is like Lattix.
Lattix is a printing.
Yeah, it's a printing tool.
Yeah.
But Emacs is an editor, just a text editor.
But it's fully integrated into everything that is digital.
I find it too hard to, I don't know if say waste my time or investment.
Ah, contrary.
You'd have 10 times more time.
Oh, yeah.
It's an investment to get started.
Yes.
I'm not so sure about that kind of investment.
I mean, it's like very, very long term investment.
So perhaps is more useful, some small pils off of any other thing.
What about your information sources?
Yeah, actually that's pretty simple.
My information comes from the screen that I'm looking at now.
And I do read newspapers now and then.
But I love reading newspapers.
But when I've read them for two or three days and nothing changes.
It's the same thing every day.
Because I miss them again.
And yeah, so all my work is public on internet with a discussion forum, the blogging.
And my sources are basically the same.
I get a lot of information from the Revit API discussion forum.
And obviously I have meetings with my colleagues and I have internal Autodesk channels.
We use Slack internally to communicate.
Slack.
And there's hundreds of different channels.
So some are APS related, cloud stuff and Revit related.
But also AI related.
For instance, the AI one is one that I follow quite closely.
All right.
Well folks, that's all.
And this is the end of today's show.
My goal was to keep everyone awake, awake, engaged.
And I hope we've managed just that.
To wrap everything up, it's clear that building involves code more and more.
It means that APA is frameworks, programming languages and all that stuff has found its
way to our computers.
And let's face it to our BIM skills.
I'm not saying that everybody should learn to program, which I strongly recommend.
That is very clear to me that coders are becoming more and more common in the AC sector.
Jeremy, anything to add before we close?
Nope.
Fully agree.
Well, that's it for today.
And thanks Jeremy for sharing your insights and stories.
I hope you enjoyed spending this time with us or at least not suffering too much.
Thank you.
And before we go, remember to join our community where you can dive deeper into technology
and innovation in the AC sector.
BIM
Recinsiders.
Don't miss out on connecting with top minds in the field.
Best regards.
And until the next episode of BIM Rec's podcast, podcast of a BIM, I already said that.
Even technologies doesn't have to listen to.
