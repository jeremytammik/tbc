https://restream.io/tools/transcribe-audio-to-text

Right now. This is Ben Rez, the podcast about being on technology applied to construction. The podcast that even technologist doesn't dare to listen to. Welcome to BIM Bros Podcast, the place where we chat about BIM Technology and Technology in the Construction Whatever. I'm gonna say that today, I'm very, very excited to dive into the world of AEC technology with someone who has been and is behind some of the most popular CAD and BIM tools since a lot of years.

Gary Mitamic, also known as the building coder, is consulting analyst at Autodesk, has been a cornerstone of the company since 1988, and his journey began as technology evangelist spreading the gospel of AutoCAD Development across continents After a stint way working on HVAC application, Jeremy returned to Autodesk in 2005. And ever since, he's been deeply embedded in the Autodesk developer network, specializing in the Revit API. So, yes, Jeremy is the man you blame on when something doesn't work in your plug in or when you don't understand why in the hell there's no way to do whatever the an easier way when struggling with the Revit API. Jeremy has an amazing very, very amazing academic background in mathematics and physics. He has worked as a teacher, translator, c plus plus programmer, pioneering the graphic user interface, and multitasking projects.

Well, as I said before, fluent in 6 languages. He's a cultural servant who also enjoys playing the flute, reading, traveling, and engaging in theater improvisation, but he also is a jogger carpenter and used to enjoy climbing cliffs or navigating oceans. All those things while he maintaining while maintaining a family life with 4 children and involvement in community focused projects. I can say I just can say, what have you I've been doing my entire life, Jeremy. Welcome to Pinterest.

Hello. Thank you very much. That's, nice to hear. I'm impressed. Well, I am impressed.

Myself. And I I I've even didn't say the, yoga part, your meditation skills, your commitment with music, and a lot of things that is, in your resume or around the the Internet, which, makes me ask if are you the same guy, or there are a lot of Jeremy Tamakes all around the world in related things related with construction sector because it's amazing what you you've done and you what you are doing. It's all a question of marketing. Then congratulate your marketing team because it's quite amazing. And please let me introduce my partners today, just my partner, before continuing because I must say hello to Rogelio, who is helping me to destroy Shakespeare language.

You don't you don't need any help from my you don't need any help from my part of Well, as usual. You don't know what you've been doing with your life, but we we do. We do. What? By the way, Rogelio, how are you doing?

Fine. Fine. Are you very the nervial nervosa and fresh carry spirit of threat to to to death. Yeah. Right.

Going to the point directly because, you know, being not my my mother tongue, perhaps in English is more difficult at least for me, making introductions or quite amplos these pitches in advance. So, let's go straight. And starting with your your background, You've been with Autodesk since 1988. Most of our listeners, well, you know, they were just a dream in their parents' head or even not a dream. But this means that you've been there since AutoCAD 10.

I've been checking, and it that's means a lot for many of us because it's time to ask something I I've been asking myself a lot of years. Come on, Gary. What's wrong with our hedges boundaries? For real? We all want to know.

Yeah. I think I I I asked this I don't know. Millions of times. But, many, many people are aware that, of your maths and physics background, but it does just a tiny piece of your story. I'm not talking about your philosophy or martial art interests, but it makes me wonder what was the way from your early studies in humanities to be a computer guy?

Uh-huh. I actually never studied humanities. I just studied math and physics. But you started, humanities in in high school? Yes.

High school. I went to an old fashioned German, high school called Gymnasium Gymnasium in Stockholm, in Sweden. So I grew up in Sweden and went to I I read it. That that's what I asked. The nice thing about this school was that it was sort of traditional focused on humanities.

So there was more stress on, languages and philosophy and culture, and I was very happy about that. And another thing that I was happy about was that it's a German foreign school. So Germany subsidizes these schools all over across the planet in various places. And the for the teachers, they come from Germany for a limited time, like 4 years or something, and it's quite a privilege to go there. They get economic advantages.

They are selected. So we had very good teachers. And another aspect was that for people staying in Sweden, it was quite attractive to leave the school for the finishing years and go to a Swedish school instead to finish off because they could save 1 year's schooling. This gym gymnasium system had 13 years of schooling in total until you reach the baccalaurea, the Abitur in German. And in the Swedish system, you had 11 or 12 years depending on what kind of or or 13 for the really hardcore technical branches.

But then you would be specializing in technical stuff or in simple stuff. Very nice system in Sweden. I like it. All the kids are together until the end of 9th year, and then they can choose to specialize in any kind of direction. And even if you want to become a carpenter or a mechanic or something, you still stay in the same system.

So you have a certain amount of schooling and a certain amount of practice. And the people aiming for more academic directions. They have more years and no practice, more academic stuff. Anyway, so lots of people left my school, and our class shrunk and shrunk and shrunk. And we were actually, at the time, the largest finishing class in the history of the school with 10 pupils.

Same. Class before us had 4 pupils for 1 year, and the class after us had 6. So it was quite special and very high quality, a very pleasant you heard it. It's going to Do you think because here in Spain, we have some kind of big debate about humanities in high school in high school. Ah.

And and our programming about, how the the educational education system must be. And do you think that background in humanities added added up to your formation, to your studies in maths and physics? Do you do you find it useful? Yes. Yes.

Very, very useful. Absolutely. I do think it's a shame that, schools tend to scare young people away from mathematics and physics and rational thinking and logical thinking. That's really a big fault in the part of most of our didactical systems, I think. But at the same time, humanities take a much more time to shape.

Yeah. I agree. I agree. You are making things. This is something that you really find the taste for it in when you're mature mature and you and you grow up and, it's it's true.

Yes. Foundation is laid in the schools, of course. Yeah. Yeah. I'm a a great fan of early schooling or early caring for children.

There's a study from 1962 1962 proving that it is economically sensible to invest in schooling or caring for young children. They took a 192 people in a ghetto in New York, children, and half of them got caring in the afternoon, and other half didn't in 1962. And they followed these children since then. How long is that? That's 38 plus 24 over 50 years.

So they could see what effect did $1 of caring per afternoon for 1 child have in its life, in employment, health, criminality, everything. And it it pays off 100 of times over. And the prizes for this study were not given to the social workers or teachers who explored this concept, but to a professor of economics. He got a Nobel Prize for Economics for proving the return of investment on this initial childhood investment. And Prove it something that And still all politicians ignore it up until today.

They say, no. We need more money for police. We need more money for prisons. No. You don't.

No. Less money for schools, less money for kindergarten, less This is then then less That's criminal. Then there's confusion between spending and investment. Yes. Yes.

Yes. Yes. You can and there again there you come back to rationality. We would need a rational look at investment and spending, and we would need rational politicians, and we would need rational voters. Yeah.

And the problem is that they could be an issue. That's, very easy, goal to achieve. But perhaps it starts with, you know, the the the previous part, the investment on schooling. Yes. So it's like going again and again on the on the same, mistakes.

I don't know if nerd or geek is offensive in English. I I really don't know. I mean, I use it in Spanish as well, it depends on the context as something good, but, I don't know if English is is something bad. But, I'm pretty sure that there's something which what happens between being a a humanities student in baccalaureate. Baccalaureate needs to start maths and physics studies in high in in university.

How is the the the way to to do that? I would definitely identify very strongly with geek and nerd, and I always was one, I'm afraid. And I think that most people who decide to study mathematics are nerds and geeks in a way because, at least from my point of view, mathematics is a way to deal with an area with some certainty. You you see the way to understand our world? No.

Definitely not. The world is much more complicated. Mathematics is no way as complicated as And the way to avoid it. And and even more complicated than just the world are human beings. Yes.

And emotions and cultures. I can say, yes, they are. Yes. So I think many, many people who go to study mathematics are sort of seeking something simpler than the normal rash the the human world and even simpler than the humanities. Yeah.

Well, as I said before, I I researched your resume and your your entire well, all all which is published in in Internet about you, or at least many of the the web pages that says something about you, and many of of them, has been written written by you, by the way. And everybody can can read, that you're fluent in 6 language. Languages with, we really appreciate. Not only speak 6 languages, but you're an avid reader too, and that's only the pick. And what is, in my in my head in my head is how do these skills I mean, being a carpenter, being a musician, being a climber even, how all those skills, influence your technical work?

Well, I think day when you are working? My work is mostly pretty separate from my, private life and other activities. So there's the influence is just I'm interested in everything I'm interested in solving problems, and, that's one common factor between all of these activities. I bet when you're climbing, perhaps solving a problem could be the the difference between a a good a good end or what not so good end. It can.

Well, perhaps, most of us and most of our audience has a story to tell, about how they ended in BAM and BIM, or how they discovered a more productive way to work using BIM tools. I must say using your BIM tools because, you know, we all, assume that rabbit is on everywhere and is being the the king of the the the market. But your background is anything but the usual, I mean, you're mathematician working in the ISU, an ISU related company. How was it even linked? I mean, perhaps there was no construction workers to solve problems or to programming tools.

I bet they weren't, when you started. Yeah. Well, Autodesk has always had a focus on these different domains and tried to address all of them so the mechanical, the architectural, the generic drawing and modeling and in the last decades also the creating worlds in general. And when I started working for Autodesk, I was actually employed to do developer support in Europe when we didn't yet have any developers because, John Walker had only just integrated Autolisp into AutoCAD. That was the first real sort of hardcore pro customization possibility within AutoCAD.

Before that, there had been some very minute possibilities, but Lisp really revolutionized the way that AutoCAD worked and was used. And even the way that Autodesk looked at AutoCAD and the developer community as an area where unimaginable things could be done and the tools could be used in ways that nobody had thought possible before. And that was the thanks to John Walker. I I I'm one of the first on claiming that one of the smartest things on Revit is the the API. I've said many times that is very, very clever to launch an, let's say, incomplete, incomplete product that can be finished or adapted by the owners, well, owners, you know, their users.

And I I think it's fair to say that you came from AutoCAD when where a lot of people have, as you said, learn functional programming even if they didn't know risk was functional programming, like the way. And but how how how was born in the idea of opening in so open way the app to be completed by the users? I mean, when when somebody realizes that, perhaps the best way to do the best way to to make our tool, Revit, most more and more popular is not to make tools for everybody, but opening it. Are you saying are you saying that the best thing to do, it it was not do, not doing anything at all? Well, they they they did the the the the best thing, which is opened your doors and let people to interact with your your tool.

Yes. How how Basically, that's what Autodesk, proclaims today being a platform company, this platform idea. And the idea of a platform grew step by step. And that was also all due to John Walker and back in the last millennium because he implemented Autolisp for his own purposes. He wanted to do things in AutoCAD that were difficult to do manually.

So he wanted to do it programmatically. And for that he needed a programming language. And then when Autolisp was available and successful, the software landscape started to change, and more and more packages, components became available with powerful functionality inside of libraries. So and also Autolisp showed that it was powerful for interaction and manipulation. But for performance critical tasks, it was not sufficient.

So, the next package or functionality that John Walker became interested in was a software package called AutoSolid. That's CSG constructive solid geometry modeller. So you could do solid modelling in this programme, and it had a c interface. So after Lisp, John wanted a c interface in AutoCAD because with the c interface, he could could hook up the source code for Autosolid with the source code for AutoCAD. So he went and implemented ADS, the AutoCAD development system, which is just a c wrapper around Autolisp.

And then we packaged Autosolid into AutoCAD and suddenly we had 3 d AutoCAD with real solid modelling capabilities. And quite soon afterwards, object oriented programming became a big topic for large software projects. It was clear that the complexity of a large software project cannot be managed at all without compartmentalizing things, separating them clearly. This is one piece. This is another piece.

This is a third piece, and the interfaces are clearly defined. So, people started thinking about re or converting AutoCAD to an object oriented environment. And that happened with another pretty genius programmer, Bill Adkisson, who got the task of making AutoCAD object oriented. He initially wanted to do it in small talk. Small talk.

Small talk. Yes. Very pure, pure, pure object orientation. The it it seemed a bit too complicated or challenging. And I ended up choosing c plus plus instead and implementing the AutoCAD runtime extension, ARX, which later became object ARX.

And then with ARX, AutoCAD was just a kernel, a very small, small, small kernel, and everything else was plugged into this kernel. And that meant you could take other things that were not originally planned and add them as well. So AutoCAD suddenly became this huge, unlimited programming platform. And, in Revit, the situation was completely different because there's a there was recently a blog post on the history of Revit. I don't know all the details, but it was originally written completely without a programming interface and also without any programming interface in mind.

And when Autodesk acquired Revit in, I don't know what, 2005 or something, Autodesk said, we are a platform company. We understand the importance of end users and developers being able to adapt the product and adding new functionality. And the Revit team said, never. Never. No.

Absolutely not. That is not the idea of Revit. And there was a fight about that, a struggle. There's no way to success with that orientation. Anyway, so Autodesk, as the owner of the product, got to do as it wanted, and an API was added.

Yeah. So started to to release the API as it's in it's release of, Revit more or more open. Is that because it was not so API focused? I mean, because what you said was not designed to be so open or not to be a platform itself, which is nowadays. Yes.

Well, it's it's still sort of halfway between platform and user interface. Originally, the Revit API was a com API. So based on the Windows com interface, and that was a bit shaky. And quite early on 2,009, 2010, it switched to the dot net API, which was more stable. But, as you say, it Revit itself, its kernel is not diff designed to be an API driven kernel or a platform for programming.

So it it is still internally more focused on the user interface, but the developers have set it up so that every single piece of user interface functionality comes equipped with a script. Alright. An internal Revit development language script. So every button, every command, every option is somehow linked to this scripting language. And if you click a certain button, then this scripting language will produce the dot net API for it.

So nowadays, the requirement from the program managers of Revit is if you write a piece of functionality, you write the user interface, and you must enable this script so that the API is automatically also produced. And that's why the the coverage is broader and broader. And for quite a number of years, there were old pieces of Revit that were not equipped with this API scripting. And all the new pieces, all of the new pieces were always equipped with scripting. And therefore, the coverage would grow and grow and grow.

And then the migration, the recent migration. I mean, it's well known that the Revit API API was based on dotnet, 4.8 framework. But you've done a, I think, a a huge jump in Revit 2025, changing from dot net 4.8 to PointNetcore8. This is some I mean, a significant upgrade, isn't it? Yes.

It is. Yes. The reason now? It was actually overdue. Many developers have been asking for an upgrade to a more modern dot net platform.

Really? Several years now. Yes. Absolutely. At least 4 or 5 years, people have said, I'm using new dot net functionality.

Why are you not? And the reason is simply that Revit is making use of a number of additional components again. And the dependencies of all of these components needs to be considered, and that makes every kind of significant migration very, very complex to manage. And that's the reason why it was postponed for a long time, and there was even doubt about whether it would be possible in this release. And, also, Autodesk has tried to unify the platform components.

So there are a number of components used in the desktop products that are reused both in AutoCAD, Inventor, Revit, in several different environments. So all of these products had to agree and synchronize and decide we will take this big step to move to the new, generation of dot net. And I think during the last year or so, it was still quite a long time unclear what version of the dot net core will be targeted. They started by moving to 6 or 7, and then towards the end, they found out, oh, yes. Okay.

We can manage, and we will move all the way to 8 right away. Or perhaps those developers were with who were claiming for the the migration are the half on the other half is those who are claiming, why the migration has to change all my environment and makes me to re rewrite the all my plugins and and whatever. That's what I was going to ask. I mean, is it necessary? What are the benefits of changing from dotnet4.8 to.netcore8?

I mean, there's a I'm not an expert on dotnet or the, functionality, but I can just say that dotnet4.8 was so old and out of date and not being enhanced at a certain point after a couple of years of age in the software with security vulnerabilities and new functionality coming up, things just become so old that it's very hard to maintain them. I think I I I don't know if I'm wrong wrong, but I think, dot net, which 1? The.netcore Corey, 8. It's able to be used on on web applications. Is it?

So is there any chance to have this in or let's say, is there anything this related to this step, this huge step? It's link linked on somehow with probable Revit web application? I'm pretty sure it's not. You you have to see that Revit is a c plus plus application. I know.

This dot net API interface has no to do with the web. The web interface. Yeah. So, perhaps a hybrid application, which means, half of the application runs on your servers and the other half runs on my, web browser. Yes.

I think some parts of Revit run that way already, don't they? And I guess that those parts will grow slowly, slowly, step by step. But the main core of Revit is still c plus plus desktop local installation. I don't know if wait a minute. How is the the the technology?

I think there's a way to to convert some c plus plus application into web apps, which is well, I don't mind. I I can't remember the the name, But per perhaps I I I I've just, been dreaming about the this unicorn called, rabbit web. Mhmm. Yeah. You and many more.

Uh-huh. I I lost my script, and it is okay. Just just to to, name some of the the enhancements or improvements that you you release this in in this version? I think because I'm not an expert on on Revit, that the the Revit, 2025 API has introduced introduced some additions in the electric and sectors that perhaps are being more important than than the the other sectors is is right that I really don't know. I I'm not at all an expert on Revit's, user interface or Revit functionality.

So I don't keep up I mean, in in in into in in the API. Yes. No. I haven't put that in details. I can't even say.

Okay then. Let me bring something a bit different. I mean, because, well, I'm not a rabbit user. I'm an archicadot time user from a long long time ago, you know, some geologic era behind. And I know what I've seen how, the authoring software has evolved since its initial versions.

I was very curious when Revit was launched and have followed the software since because I already started learning Revit when, it was, it was in part of, Autodesk. And, you know, I'm kind of a bit worried about how and where, the offing software is heading its course. You know, we were some very we thought sometime ago that we could make a whole project, a whole digital twin in our authoring software, in the beginning of this process, 20 years ago or 30 years ago. But and now what we can see the last decade is that this protest probably kind of a stall. The development, stopped in some of the functionalities about modeling that, we would like to to to get in the offering software, and, there we go.

We thought, that maybe the the some movements about, how to change the license model and to get into a subscription model. We we will, make it easier for the, you know, offering software companies to develop and and procure these new functionalities that we need. But probably it it that isn't the the the way it's going now. And on top of this, we got we have all the legacy code that it's embedded in Gravatar archive to improve, because that is a heavyweight to be lifted by the prime core of companies. So what is your point of view about this?

I mean, are we going to finally get, the software that can make, you know, organic shapes or produce perfect digital twin of our project or or that's not the perspective or the the the the point the destination point that the companies want to to get there. I think the companies are all continuously searching for optimal solutions, most efficient workflows, and discovering new targets to optimise how a building is created. And there are many, many factors that influence that. And I I'm you know, the the authoring plat authoring software as a tool is just one out of many. A number of other tools are the communication, the collaboration, how to share this information, how to ensure that the information goes all the way through to the building site, the maintenance of the building, and all of that.

And with all of the focus on collaboration and communication, I do think that the cloud based solutions are can address many of those tasks. And this target keeps shifting as well. So it's clear that we have to keep up with the old, functionality that is already available and the people rely on, and at the same time integrated with new solutions that address the most urgent tasks. But do you think that is much like marketing, though. But do you think that the the task has shift from the modeling process to the collaboration world to the and because what we see in the in the modeling part is that the the thing the advances are fractional.

You know? Yeah. Very little in that in that in that field is is is improved or even sometimes the new tools, fight along the ancient tools because Yes. This one these old tools rely on legacy code and the new are implemented differently. Yeah.

Well, I think it's very, very important to continuously look at what is the task at hand, how can I address that most efficiently? And at a certain point, I'm when you say there's a struggle between the new and the old or different approaches, I would definitely one one I think the most important thing in software content. If you have a problem and you have 2 components involved in that problem, throw them away, both of them right away and search for a new one because there is no single programing task on the planet that has not been solved already. And many of them have been solved a 100 times or a 1000 times. And the look of these solutions are available, in open source.

So grab the best solution you can find. Research the problem. Understand the tools that you already have in-depth. That's already a big task. I don't understand Revit in-depth, and I don't think many people do.

I totally agree with your approach. If it doesn't do exactly what you want with a minimum of fuss and without any conflict with others, throw it away and and do something else because the solutions are ready to be picked and connected. And that's a total change in the way that people programme today. You have all these components out there, and the best solution is the most efficient connection of existing components. Perhaps The Hive sorry.

The Hive is smarter than the Bee or something like that. The hive, like, is smarter than the bee. Perhaps, you are afraid of letting Arcticat go and try new new solutions. No. No.

That that is not going to happen. My article lost. I think you you already know who is more focused on on modeling part and who is on on the information part in this in this group. But talking about collaboration, you you talk you you, well, I didn't, said before that you are part of the forge, developer support or something like that. I mean, and you you, thought, said something about the the cloud, and the how the collaboration, the the cloud applications, and everything is going on.

And when you're just you you talk about collaboration, I I thought, about community because collaboration means not only collaborate on the same project, but collaborate on the any any other, any other people in projects. And we're here in in being res strongly believe that what in in what community can build, and that's what why we built Bemrass inside it, actually. And you are known not only for being a rock star in the developer community, but also for blogging blogging about forge, beam, and the Revit API. I mean, there's, like, an official Jeremy Tamik speaking on the developer community. But, again, there's something like a side project, perhaps, on the the blogging about all those things.

What makes you what motivates you to to share your knowledge so actively? Because, I mean, I've seen your posts many times, linked as a solution for something or, just read what Tamika, says about this or or this. And why when, these 2 projects, or why, what motivates you to share the the knowledge on on this way? I it's again the same, motivation that I mentioned at the beginning. I love solving problems, and I have a lot more fun solving a programming problem.

I enjoy programming tremendously. But there's a bigger problem around. And my job is to support the developer community. And to do that is more about communication. And I did some programming to address very specific tasks to prove that it is possible to achieve something.

But the longer, the more I've been more of a librarian and just collecting information and publishing it, editing it, perfecting it, making it easy to read and clear to understand. And, it seems to me that is Something like a course, creator? Yes. A curator. Exactly.

A librarian or curator. And it seems to me that's just the most efficient way of ensuring that the major part of the community moves forward and can be effective. So in a way, it's another way of problem solving as well. I just my communication and collaboration is an efficient way to for problem solving. And that is Very, Ashish.

I mean, I I I read a lot of times in many different forums forums or groups or whatever. And things like, your problem is all is already solved. Just read this post from Jeremy Tamick, and everything is is coded already. So you don't have to invent the wheel again and again. Yes.

And most of that is not my programming, but the program the solutions from the community shared in the discussion forum. And in that forum also, there are quite a number of people who know a lot more about both Revit and programming than me. I know almost nothing about Revit. I understand programming. But these guys, many of them know more about both.

And this I know. Effective. And, well, that's what they call collective knowledge. Yes. Is, I mean, the the best way to know about anything.

So, Rogelio. Talking about collective thinking, you know, we we I'm always amazed how we are we have so so much difficulties to build an AC software, an open source AC software. We have, you know, our our landscape here in in Spain and Europe is a lot of extremely small companies. And, you know, some time ago, we we made an inquiry and for something like 500 professionals, and we found that almost 98% were working in companies, of fiberless people. And they do everything.

The architecture, the structural analysis, the MEP analysis and design, whatever you name it. And for those companies, the license cost for all of that software that is needed is a heavy burden. So many of them are looking at the community and asking, why don't we have some AC open source, software? Like, for example, photographers or or designers or, you know, 3 d artists, have developed, throughout these years. And do why why do you think it's so difficult to to produce to to achieve this kind of arrangement between the con the community to to work together and and try to get something that would be very Always very interested in in this aspect.

And, actually, back in my Autolisp and AutoCAD days, a group of maybe 50 or a 100 developers, we collected in Central Europe and formed a community called Age, AutoCAD Developers Group Europe. And we organized our own conferences and shared a lot of information because of the lack of information on Internet at the time. It didn't really exist in the way we see it today. And also, yeah, developer support from Autodesk was limited basically. In the beginning I was alone in Europe, So developers helped themselves and shared information, and that was effective.

And also today, I would say there are very large, very, functional and powerful open source AEC solutions being worked on. I believe one important one is Speckle. Don't know where Speckle is amazing. Speckle. Speckle.

Yeah. Yeah. We know. Yes. But I do think the issue is also to do with, liability, trust, guarantees, big companies, marketing.

It's a little bit like the Windows desktop platform, which is in many ways inferior to something open source like Linux or U. K. In general. And still, the big companies all over the world spend 1,000,000 and billions buying Windows operating systems. And buy new servers.

Instead of using the the free open source and and more trustworthy solutions that are available and that they could even look at the code guarantee that they're not being spied on by Chinese or NSA or Russians or whoever. But still, they they prefer to pay and have a guarantee that if something goes wrong, we have our developer support and so on. And it's it's it's an aversion to risk, really. I would say the whole Aversed trick. Community in the last 50 years has been moving away from risk and fun and towards guarantees, liability, risk aversion.

And that's that's And all the things. Yeah. But but if you think about the intellectual property and the security of our production, which is you know? And sometimes and sometimes it is a crucial point. It's it's, you know, it's I don't know.

It's something that it's very strange, the behavior of the AC sector because that's the last thing we're thinking on we're thinking on. I mean, we're we're always about the productivity and everything else, but not about but I'm am I going to do with my information today that I the, you know, maybe rabbit or or arctic cat doesn't exist anymore. Ah, yes. Yeah. Yeah.

So, you know, we have used a lot of, critical information in our internal property in platforms that we don't know if they're at. They are going to be there forever. Yes. Yeah. All of my work, everything I've ever done is in text files.

I see. You can. You can. We we we can we can we can we I I moved from from Windows to Mac, like 10 or 15 years ago, and all of my daily tools were windows batch files and Python scripts. So I moved them to Unix shell scripts and Python scripts.

And I was moved from Windows to Mac in a couple of hours, and I can move back again anytime. And I have simply boycotted proprietary file formats all my life. And we cannot afford that luxury. You can. You can.

You can. Even back in the 19 eighties, I was a big missionary of do not encode your information into a DWG format. Put it into a text file and write a small add in that reads your text file and generates the DWG. Same thing for BIM. The BIM I know.

Then then that's not a skill that everybody in our sector has. So But it's some developers do this and, fare very well with it. I know. But when it makes you when it comes to to server, for instance, everybody relies on, Linux. Almost everybody relies on on Linux.

But I I have to admit that when it comes to desktop, even if they are using Linux, they, prefer paid Linus options. I mean, that is well known in between corporates, among corporates because they provide Linux desktops, but they also provide the security liability of a big company, which is, I think, the the most important factor on the, choosing between open source and proprietary platforms from the companies. But, Rothelio, there's a lot, a huge Yeah. Yeah. Yeah.

I know. I know. I Open source tools I was making of. Authoring tools itself, which means that perhaps it's not trying to achieve an authoring tool, but trying to get the most of each tool you have. You know, my question was about, authoring tools, and, you know, that's, I mean, that's probably the most difficult software to be produced.

So, you know, but but we've seen more difficult software have been produced by the community. For example, the Sutra Analysis core engines that now is a. The the For example. But And and and and but we we don't we don't see that kind of achievement in the AC industry. That's what's the meaning of the question.

I don't know. Even Revit or Autodesk software have a lot of Probably. Yeah. Open source, libraries, tools included on the server. So perhaps it's not a, a matter of how getting a a answering tour, but how getting good environment for your tours.

Leaving this, out of the discussion, what's neck what what's next? I mean, you've you've witnessed almost the entire history of the AC software. Being a developer, of course, into the the construction sector, and being part of Autodesk, which is, let's say, the the first, ASE software company. And related to this, I've been hearing and listening more and more how the manager, let's say, I've been an expert, must know about programming. I'm very fond of having coding knowledge, but I'm pretty sure that, about this.

To be a man a BIM manager has nothing to do with being a developer. However, I believe that set of knowledge of programming, logic, algorithms, whatever, can be or should be tremendously useful in any technical environment. First thing, Yuri, any advice? Something to say to these professional students who might be listening and considering focusing their career in potting? I totally agree.

It's really important to know what you can do, what possibilities you have, and understand when to make use of them and when not, and how far to go in each direction. And what what about, not being able to code anything? I mean, not being a coder, but being able to think like a coder. Yes. Well, actually, we're getting very close to the point where certain number certain areas of thinking are no longer required.

And a certain amount of experience can be had for the cost of asking. So, I'm very excited about the developments in AI and question answering systems and coding solutions provided or AI supported coding solutions. So the whole coding industry has changed tremendously since the introduction of GPT. And just as an example, I think the number of questions on Stack Overflow reduced by 50%. 50?

50. Woah. And Stack Overflow has changed and adapted its entire business model thought concept, foundations to make use of AI and to handle the changes that come by through the use of AI. I I'm I'm not a programmer now myself today because of the coding and developer support and blogging and so on. But as far as I know, hardly any professional programmer today does not use, code code project.

I I must admit that I I prefer going first to chat DTP than Stack Overflow because, you know, you can discuss the the solutions and the the options with with it. And in most programming environments today, you have a coding assistant built in. There's the copilot is there copilot. Yeah. So and that does a lot of work for you.

And that work is growing very fast. And I don't know how far it'll grow. You know, where is the end? We live in very exciting times. And from another point of view, perhaps possibilities.

What's the danger? What what it worries me is that perhaps in in from another point of view, we are feeding ChargeGDP and all those artificial intelligence with code made of Artificial intelligence. Yes. Like I don't know if there's something innovative on there because Yeah. It's always, like, having what a a feedback is.

I mean, a really feedback because it's feeding itself by by by the code that it produces. Yeah. Yeah. Yeah. Well, there are other examples as well, actually.

If you took interest in AlphaGo AlphaGo. Mhmm. Yeah. We know. Go pro game software that first became better at Go than a human being.

And it immediately in its first competition, it was introducing new moves that had not ever been discovered or tested by a human I read about that. 3000 years old history. And nowadays nowadays This is crazy. This is Makes you think about an error, but it wasn't an error. The the it wasn't.

Yeah. It was. And and and the machine learned the the the rules on its own. I mean, there was no reprogramming about how to play. And and every single professional chess player today trains and learns from Alpha Chess.

So Yeah. And also I read an article about a guy who asked GPT to make a game for him, and he said, I like Sudoku, but I'd like something different. And chat GPT invented an inverse Sudoku game for him. It was completely new, and he put it online. And within a week, he had 50,000 subscribers to his new game.

I I forget the name of it, but it's on the blog somewhere. I put Yes. Yes. I don't want to say what what to turn to be alive. It's very exciting.

Yes. Dangerous and excite maybe who knows how long how many human generations there will still be to stay alive. Now we are Let's let's let's wait for me, and perhaps next one is right to In the last Retaliators, chess championship, the the ones who's going going to play against the world champion, What we had is a rating from how close the chess player, the human chess player, was against the perfect moves of the machine. So and we were between 99 for 95% to 98 percent in the in the the more close we get to the perfection of the machines. So now we are measuring ourselves against the perfection of the machine.

Wow. As as amazing as scarier. Scary. Scary. Just to, as as we wrap up our conversation today, we're curious.

I think I mean, it's something we we do in each episode. We are curious about the tools. Are you going to skip the last questions about Yes. The okay. I I got I lost the last question.

Yeah. Yeah. Yeah. About what was his view of the new technologies and trends? Well, I was to ask about the the trends and new technologies, but the the the answer was done because artificial intelligence is is the topic.

Not not, virtual reality? I'm not into that myself. I haven't I've I've thought a lot about what's happening in the AI world, but not so much about virtual reality. Can you see it as can you see it as a game changer or or something? I'm well, I don't know.

I would I think the game changer that will come is robotics. I mean, now we have the AI that goes around and tells us, answers our questions. But we also need someone who builds houses, washes our clothes, does the dishes, and cooks 5 star menus. I was I was writing I was writing yesterday that, the butcher robots are pretty much better now than the human butcher. What robots?

The butcher. The the Oh, wow. Oh, the butcher are now now are better and, yeah, and, you know, more efficient and more perfect than the human butcher. So so Perhaps we are There's nowhere to hide. No.

We we are watching what how the the artificial intelligence can replace us at many tasks. And perhaps the next frontier is robots replacing the physical tasks, which is, I think, well, harder than than the the other ones. But, again, I'm trying to to close the interview with this, habit we have, which is knowing about your tools and your resources and what inspire and support your work. So, just to to make your insight not only helpful for us, but for our listeners and, I don't know, perhaps taking some good resources to explore. So, we have always 2 questions.

1 about your information or sources. So your where what are your main sources of informations? What resources, do you use or regularly rely on? You all you already said that you read a lot. And which, tools with the where which essential tool do you think is indispensable for your daily return?

Yes. Okay. Well, I use the command line. Command line. Command line.

That is shell scripts, Python scripts, programmers, text editor. Actually, I I always recommend this this pamphlet because it's not even a a book. And in in the beginning was the the the command line. Ah, yeah. Yeah.

Yeah. Because it's One thing that I do regret is that I did not learn Emacs or Vim. Oh, it's I wanted to I wanted to several times, and I wish I had done it, you know, 40 years ago. I I I I just tried, and I regret in the same, minute I start. So, perhaps it's like, latex?

Latesh is a printing, yes, if we're printing too. Yeah. But is eMax is an editor, just a text editor, but it's fully integrated into everything that is digital. I I find it too hard to to to I don't know if, say, waste my time or invest my time. In contrary, you you'd have 10 times more time.

Yes. It is. It's an investment to get started. Yes. I'm not so sure about that that kind of investment.

I mean, it's like very, very long term investment. So perhaps it's, more use for some small bills of of any other thing. Okay. What what about your your information sources? Yeah.

Actually, that's pretty simple. My information comes from the screen that I'm looking at now. And, I do read newspapers now and then, but I I love reading newspapers, but when I've read them for 2 or 3 days and nothing changes. No, I think every day, because I stopped again. And, yeah, I so all my work is public on Internet with a discussion forum, the the blogging.

And my sources are basically the same. I get a lot of information from the Revit API discussion forum. And, obviously, I have meetings with my colleagues, and I have internal Autodesk, channels. We use Slack internally to communicate. Slack.

And there's hundreds of different channels. So some are, APS related, cloud stuff and Revit related, but also AI related. For instance, the AI one is one that I follow, quite, closely. Oh, good. Well, folks, that's all.

And this is the end of today's show. My goal was to keep everyone awake awake and engaged, and I hope we've managed just that. To wrap everything up, it's clear that building involves code more and more, which means that APIs, frameworks, programming languages, and all that stuff has found its way to to our computers. And let's face it. Let's face it to, our beam skills.

I'm not saying that everybody should learn to program, which I strongly Yeah. Yeah. You're saying you're saying. Which I strongly recommend. But it's very clear to me that coders are becoming more and more common in the AAC sector.

Jeremy, anything to add before we close? Nope. Fully agree. Well, that's it for today. And thanks, Jeremy, for sharing your insights and stories.

I hope you enjoyed spending this time with us, or at least not suffering too much. Thank you. And before we go, remember to join our community where you can dive deeper into technology and innovation in the AC sector. Beam rest insiders don't miss out on connecting with top minds in the field. Best regards.

And until the next episode of beam rest podcast, podcast about BIM. I already said that that even Chuck Norris doesn't dare to listen.
